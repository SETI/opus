
# Don't add stuff here, this is a generated file.
#
# This file was generated for volumes %s
#
# generated by import/build_obs.py
# for custom models use models_custom.py

from django.db import models

class UserSearches(models.Model):
    # the table that describes a search that was issued by a user during a session
    selections_json = models.TextField()
    selections_hash = models.CharField(max_length=32)
    string_selects = models.TextField(null=True, blank=True)
    string_selects_hash = models.CharField(max_length=32,null=True, blank=True)
    units = models.TextField(null=True, blank=True)
    units_hash = models.CharField(max_length=32,null=True, blank=True)
    qtypes = models.TextField(null=True, blank=True)
    qtypes_hash = models.CharField(max_length=32,null=True, blank=True)
    timestamp = models.DateTimeField(null=True, blank=True)

    class Meta:
        db_table = u'user_searches'
        unique_together = ('selections_hash', 'string_selects_hash','units_hash','qtypes_hash')


class MultObsGeneralClassId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_general_class_id'


class MultObsGeneralInstrumentId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_general_instrument_id'


class MultObsGeneralInstHostId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_general_inst_host_id'


class MultObsGeneralMissionId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_general_mission_id'


class MultObsGeneralPlanetId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_general_planet_id'


class MultObsGeneralQuantity(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_general_quantity'


class MultObsGeneralTargetClass(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_general_target_class'


class MultObsGeneralTargetName(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_general_target_name'


class MultObsGeneralTypeId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_general_type_id'


class MultObsInstrumentCocirsDetectorId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COCIRS_DETECTOR_ID'


class MultObsInstrumentCocirsInstrumentModeAllFlag(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COCIRS_INSTRUMENT_MODE_ALL_FLAG'


class MultObsInstrumentCocirsInstrumentModeBlinkingFlag(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COCIRS_INSTRUMENT_MODE_BLINKING_FLAG'


class MultObsInstrumentCocirsInstrumentModeCentersFlag(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COCIRS_INSTRUMENT_MODE_CENTERS_FLAG'


class MultObsInstrumentCocirsInstrumentModeEvenFlag(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COCIRS_INSTRUMENT_MODE_EVEN_FLAG'


class MultObsInstrumentCocirsInstrumentModeOddFlag(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COCIRS_INSTRUMENT_MODE_ODD_FLAG'


class MultObsInstrumentCocirsInstrumentModePairsFlag(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COCIRS_INSTRUMENT_MODE_PAIRS_FLAG'


class MultObsInstrumentCocirsSpectrumSamples(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COCIRS_SPECTRUM_SAMPLES'


class MultObsInstrumentCoissCamera(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COISS_camera'


class MultObsInstrumentCoissDataConversionType(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COISS_DATA_CONVERSION_TYPE'


class MultObsInstrumentCoissFilter(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COISS_FILTER'


class MultObsInstrumentCoissGainModeId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COISS_GAIN_MODE_ID'


class MultObsInstrumentCoissImageObservationType(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COISS_IMAGE_OBSERVATION_TYPE'


class MultObsInstrumentCoissInstCmprsParamGob(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COISS_INST_CMPRS_PARAM_GOB'


class MultObsInstrumentCoissInstCmprsParamMalgo(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COISS_INST_CMPRS_PARAM_MALGO'


class MultObsInstrumentCoissInstCmprsParamQf(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COISS_INST_CMPRS_PARAM_QF'


class MultObsInstrumentCoissInstCmprsParamTb(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COISS_INST_CMPRS_PARAM_TB'


class MultObsInstrumentCoissInstCmprsType(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COISS_INST_CMPRS_TYPE'


class MultObsInstrumentCoissShutterModeId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COISS_SHUTTER_MODE_ID'


class MultObsInstrumentCoissShutterStateId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COISS_SHUTTER_STATE_ID'


class MultObsInstrumentCoissTelemetryFormatId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COISS_TELEMETRY_FORMAT_ID'


class MultObsInstrumentCouvisChannel(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COUVIS_Channel'


class MultObsInstrumentCouvisCompressionType(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COUVIS_COMPRESSION_TYPE'


class MultObsInstrumentCouvisDwellTime(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COUVIS_DWELL_TIME'


class MultObsInstrumentCouvisHiVoltagePowerSupplyState(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COUVIS_HI_VOLTAGE_POWER_SUPPLY_STATE'


class MultObsInstrumentCouvisObservationType(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COUVIS_OBSERVATION_TYPE'


class MultObsInstrumentCouvisOccultationPortState(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COUVIS_OCCULTATION_PORT_STATE'


class MultObsInstrumentCouvisSlitState(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COUVIS_SLIT_STATE'


class MultObsInstrumentCouvisTestPulseState(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COUVIS_TEST_PULSE_STATE'


class MultObsInstrumentCovimsChannel(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COVIMS_channel'


class MultObsInstrumentCovimsInstrumentModeId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COVIMS_INSTRUMENT_MODE_ID'


class MultObsInstrumentCovimsIrSamplingModeId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COVIMS_IR_SAMPLING_MODE_ID'


class MultObsInstrumentCovimsSpectralEditing(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COVIMS_SPECTRAL_EDITING'


class MultObsInstrumentCovimsSpectralSumming(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COVIMS_SPECTRAL_SUMMING'


class MultObsInstrumentCovimsVisSamplingModeId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_COVIMS_VIS_SAMPLING_MODE_ID'


class MultObsInstrumentGossiCompressionType(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_GOSSI_COMPRESSION_TYPE'


class MultObsInstrumentGossiDataSetId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_GOSSI_DATA_SET_ID'


class MultObsInstrumentGossiFilterName(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_GOSSI_FILTER_NAME'


class MultObsInstrumentGossiFilterNumber(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_GOSSI_FILTER_NUMBER'


class MultObsInstrumentGossiGainModeId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_GOSSI_GAIN_MODE_ID'


class MultObsInstrumentGossiObstructionId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_GOSSI_OBSTRUCTION_ID'


class MultObsInstrumentGossiOrbitNumber(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_GOSSI_ORBIT_NUMBER'


class MultObsInstrumentVgissCamera(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_VGISS_camera'


class MultObsInstrumentVgissEditMode(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_VGISS_EDIT_MODE'


class MultObsInstrumentVgissFilterName(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_VGISS_FILTER_NAME'


class MultObsInstrumentVgissFilterNumber(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_VGISS_FILTER_NUMBER'


class MultObsInstrumentVgissGainMode(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_VGISS_GAIN_MODE'


class MultObsInstrumentVgissScanMode(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_VGISS_SCAN_MODE'


class MultObsInstrumentVgissShutterMode(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_instrument_VGISS_SHUTTER_MODE'


class MultObsMissionCassiniCassiniTargetName(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_mission_cassini_cassini_target_name'


class MultObsMissionCassiniPrime(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_mission_cassini_prime'


class MultObsMissionCassiniPrimeInstId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_mission_cassini_prime_inst_id'


class MultObsMissionCassiniRevNo(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_mission_cassini_rev_no'


class MultObsMissionGalileoRevNo(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_mission_galileo_rev_no'


class MultObsMissionVoyagerSpacecraftName(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_mission_voyager_spacecraft_name'


class MultObsSurfaceGeometryTargetName(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_surface_geometry_target_name'


class MultObsTypeImageImageTypeId(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_type_image_image_type_id'


class MultObsWavelengthPolarizationType(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_wavelength_polarization_type'


class MultObsWavelengthSpecFlag(models.Model):
    value = models.CharField(unique=True, max_length=50, blank=True, null = True)
    label = models.CharField(unique=True, max_length=50, blank=True, null = True)
    disp_order = models.IntegerField(null=True, blank=True)
    display = models.CharField(max_length=9)
    default_fade = models.CharField(max_length=9)

    def __unicode__(self):
        return self.label

    class Meta:
        db_table = u'mult_obs_wavelength_spec_flag'
# choices for all the mult fields in all data tables
OBS_INSTRUMENT_COVIMS_SPECTRAL_EDITING_CHOICES = ((1L, u'OFF'), (2L, u'ON'))
OBS_INSTRUMENT_COISS_GAIN_MODE_ID_CHOICES = ((1L, u'12 ELECTRONS PER DN'), (2L, u'215 ELECTRONS PER DN'), (3L, u'29 ELECTRONS PER DN'), (4L, u'95 ELECTRONS PER DN'))
OBS_INSTRUMENT_VGISS_FILTER_NAME_CHOICES = ((1L, u'BLUE'), (2L, u'CH4_JS'), (3L, u'CH4_U'), (4L, u'CLEAR'), (5L, u'GREEN'), (8L, u'ORANGE'), (9L, u'SODIUM'), (10L, u'UV'), (11L, u'VIOLET'))
OBS_INSTRUMENT_COCIRS_INSTRUMENT_MODE_PAIRS_FLAG_CHOICES = ((2L, u'1'), (1L, u'0'))
OBS_INSTRUMENT_COUVIS_OCCULTATION_PORT_STATE_CHOICES = ((1L, u'CLOSED'), (2L, u'N/A'), (3L, u'NULL'), (4L, u'OPEN'))
OBS_GENERAL_MISSION_ID_CHOICES = ((1L, u'CO'), (2L, u'GO'), (108L, u'HST'), (107L, u'EAR'), (4L, u'VG'), (3L, u'NH'), (109L, u'PIO'))
OBS_WAVELENGTH_SPEC_FLAG_CHOICES = ((1L, None), (2L, u'Y'), (3L, u'N'))
OBS_INSTRUMENT_COCIRS_INSTRUMENT_MODE_ODD_FLAG_CHOICES = ((2L, u'1'), (1L, u'0'))
OBS_MISSION_GALILEO_REV_NO_CHOICES = ((1L, u'0'), (2L, u'1'), (3L, u'2'), (4L, u'3'), (5L, u'4'), (6L, u'6'), (7L, u'7'), (8L, u'8'), (9L, u'9'), (10L, u'10'), (11L, u'11'), (12L, u'12'), (13L, u'14'), (14L, u'15'), (15L, u'17'), (16L, u'18'), (17L, u'19'), (18L, u'20'), (19L, u'21'), (20L, u'22'), (21L, u'24'), (22L, u'25'), (23L, u'26'), (24L, u'27'), (25L, u'28'), (26L, u'29'), (27L, u'30'), (28L, u'31'), (29L, u'32'), (30L, u'33'))
OBS_INSTRUMENT_COUVIS_OBSERVATION_TYPE_CHOICES = ((2L, u'CALIB'), (4L, u'UCSTAR'), (5L, u'UFPSCAN'), (6L, u'UHDAC'), (7L, u'UHIGHSN'), (8L, u'UMAP'), (9L, u'USCAN'), (10L, u'USTARE'), (11L, u'NULL'))
OBS_MISSION_CASSINI_CASSINI_TARGET_NAME_CHOICES = ((4L, u'Calypso'), (6L, u'Dione'), (8L, u'Enceladus'), (5L, u'co-rotation'), (9L, u'Epimetheus'), (12L, u'Helene'), (13L, u'Hyperion'), (14L, u'Iapetus'), (15L, u'instrument calibration'), (17L, u'Janus'), (18L, u'Jupiter'), (19L, u'Mimas'), (23L, u'Pandora'), (24L, u'Phoebe'), (26L, u'Rhea'), (27L, u'Ring A'), (28L, u'Ring B'), (29L, u'Ring C'), (30L, u'Ring E'), (31L, u'Ring F'), (32L, u'Ring G'), (33L, u'rings (general)'), (34L, u'Saturn'), (39L, u'star'), (41L, u'Telesto'), (42L, u'Tethys'), (43L, u'Titan'), (2L, u'Atlas'), (3L, u'Callisto'), (7L, u'Earth'), (10L, u'Europa'), (11L, u'Ganymede'), (16L, u'Io'), (20L, u'other'), (21L, u'Pallene'), (35L, u'Skeleton request  \n\t\t\t\tSR Spacecraft RAM direction'), (22L, u'Pan'), (37L, u'Solar Wind'), (25L, u'Prometheus'), (36L, u'Skeleton request'), (38L, u'spacecraft activity'), (40L, u'Sun'), (44L, u'Dust RAM direction'), (45L, u'Ring D'), (46L, u'Methone'))
OBS_INSTRUMENT_COCIRS_INSTRUMENT_MODE_CENTERS_FLAG_CHOICES = ((2L, u'1'), (1L, u'0'))
OBS_WAVELENGTH_POLARIZATION_TYPE_CHOICES = ((74L, u'LINEAR'), (86L, u'CIRCULAR'), (76L, u'NONE'))
OBS_SURFACE_GEOMETRY_TARGET_NAME_CHOICES = ((50L, u'SATURN'), (20L, u'AEGAEON'), (21L, u'ALBIORIX'), (4L, u'ANTHE'), (5L, u'ATLAS'), (22L, u'BEBHIONN'), (23L, u'BERGELMIR'), (24L, u'BESTLA'), (25L, u'CALYPSO'), (1L, u'DAPHNIS'), (9L, u'DIONE'), (10L, u'ENCELADUS'), (6L, u'EPIMETHEUS'), (26L, u'ERRIAPUS'), (11L, u'HELENE'), (12L, u'HYPERION'), (27L, u'HYROKKIN'), (28L, u'IAPETUS'), (29L, u'IJIRAQ'), (30L, u'JANUS'), (31L, u'JUPITER'), (32L, u'KARI'), (33L, u'KIVIUQ'), (34L, u'LOGE'), (13L, u'METHONE'), (2L, u'MIMAS'), (35L, u'MUNDILFARI'), (36L, u'PAALIAQ'), (14L, u'PALLENE'), (15L, u'PAN'), (16L, u'PANDORA'), (37L, u'PHOEBE'), (38L, u'POLYDEUCES'), (7L, u'PROMETHEUS'), (17L, u'RHEA'), (39L, u'S12_2004'), (40L, u'S13_2004'), (41L, u'SIARNAQ'), (42L, u'SKATHI'), (43L, u'SKOLL'), (54L, u'SUN'), (45L, u'SUTTUNGR'), (46L, u'TARQEQ'), (47L, u'TARVOS'), (48L, u'TELESTO'), (18L, u'TETHYS'), (19L, u'TITAN'), (49L, u'YMIR'), (51L, u'JARNSAXA'), (52L, u'THRYMR'), (53L, None), (55L, u'SURTUR'))
OBS_INSTRUMENT_COUVIS_COMPRESSION_TYPE_CHOICES = ((1L, u'8_BIT'), (2L, u'NONE'), (3L, u'SQRT_8'), (4L, u'SQRT_9'))
OBS_GENERAL_QUANTITY_CHOICES = ((2L, u'REFLECT'), (3L, u'THERMAL'), (53L, u'OPTICAL'), (54L, u'EMISSION'))
OBS_INSTRUMENT_GOSSI_FILTER_NUMBER_CHOICES = ((1L, u'0'), (2L, u'1'), (3L, u'2'), (4L, u'3'), (5L, u'4'), (6L, u'5'), (7L, u'6'), (8L, u'7'))
OBS_INSTRUMENT_GOSSI_DATA_SET_ID_CHOICES = ((1L, u'GO-J/JSA-SSI-2-REDR-V1.0'),)
OBS_INSTRUMENT_COISS_DATA_CONVERSION_TYPE_CHOICES = ((1L, u'12BIT'), (2L, u'8LSB'), (3L, u'TABLE'))
OBS_INSTRUMENT_COISS_INST_CMPRS_PARAM_MALGO_CHOICES = ((1L, u'-2147483648'), (2L, u'1'), (3L, u'41'), (4L, u'101'), (5L, u'255'))
OBS_GENERAL_TARGET_CLASS_CHOICES = ((2L, u'RING'), (1L, u'PLANET'), (16L, u'I'), (3L, u'MOON'), (4L, u'SKY'), (5L, u'CALIBRATION'), (6L, u'OTHER'))
OBS_INSTRUMENT_GOSSI_COMPRESSION_TYPE_CHOICES = ((1L, u'BARC RATE CONTROL'), (2L, u'HUFFMAN'), (3L, u'INTEGER COSINE TRANSFORM'), (4L, u'NONE'))
OBS_INSTRUMENT_COVIMS_CHANNEL_CHOICES = ((1L, u'IR'), (2L, u'VIS'))
OBS_INSTRUMENT_COISS_INST_CMPRS_TYPE_CHOICES = ((1L, u'LOSSLESS'), (2L, u'LOSSY'), (3L, u'NOTCOMP'))
OBS_INSTRUMENT_GOSSI_FILTER_NAME_CHOICES = ((1L, u'CLEAR'), (2L, u'GREEN'), (3L, u'IR-7270'), (4L, u'IR-7560'), (5L, u'IR-8890'), (6L, u'IR-9680'), (7L, u'RED'), (8L, u'VIOLET'))
OBS_INSTRUMENT_COCIRS_SPECTRUM_SAMPLES_CHOICES = ((1L, u'95'), (2L, u'112'), (3L, u'139'), (4L, u'189'), (5L, u'223'), (6L, u'277'), (7L, u'471'), (8L, u'556'), (9L, u'691'), (10L, u'1881'), (11L, u'2221'), (12L, u'2761'))
OBS_INSTRUMENT_COISS_CAMERA_CHOICES = ((2L, u'N'), (1L, u'W'))
OBS_MISSION_CASSINI_REV_NO_CHOICES = ((127L, u'C22'), (128L, u'C23'), (129L, u'C24'), (130L, u'C25'), (131L, u'C26'), (132L, u'C27'), (133L, u'C28'), (134L, u'C29'), (135L, u'C32'), (136L, u'C33'), (137L, u'C34'), (138L, u'C35'), (139L, u'C36'), (2L, u'000'), (140L, u'C37'), (141L, u'C39'), (142L, u'C40'), (143L, u'C42'), (144L, u'C43'), (145L, u'C44'), (10L, u'00A'), (11L, u'00B'), (12L, u'00C'), (3L, u'003'), (4L, u'004'), (5L, u'005'), (6L, u'006'), (7L, u'007'), (8L, u'008'), (9L, u'009'), (13L, u'010'), (14L, u'011'), (15L, u'012'), (16L, u'013'), (17L, u'014'), (18L, u'015'), (19L, u'016'), (20L, u'017'), (21L, u'018'), (22L, u'019'), (23L, u'020'), (24L, u'021'), (25L, u'022'), (26L, u'023'), (27L, u'024'), (28L, u'025'), (29L, u'026'), (30L, u'027'), (31L, u'028'), (32L, u'029'), (33L, u'030'), (34L, u'031'), (35L, u'032'), (36L, u'033'), (37L, u'034'), (38L, u'035'), (39L, u'036'), (40L, u'037'), (41L, u'038'), (42L, u'039'), (43L, u'040'), (44L, u'041'), (45L, u'042'), (46L, u'043'), (47L, u'044'), (48L, u'045'), (49L, u'046'), (50L, u'047'), (51L, u'048'), (52L, u'049'), (53L, u'050'), (54L, u'051'), (55L, u'052'), (56L, u'053'), (57L, u'054'), (58L, u'055'), (59L, u'056'), (60L, u'057'), (61L, u'058'), (62L, u'059'), (63L, u'060'), (64L, u'061'), (65L, u'062'), (66L, u'063'), (67L, u'064'), (68L, u'065'), (69L, u'066'), (70L, u'067'), (71L, u'068'), (72L, u'069'), (73L, u'070'), (74L, u'071'), (75L, u'072'), (76L, u'073'), (77L, u'074'), (78L, u'075'), (79L, u'076'), (80L, u'077'), (81L, u'078'), (82L, u'079'), (83L, u'080'), (84L, u'081'), (85L, u'082'), (86L, u'083'), (87L, u'084'), (88L, u'085'), (89L, u'086'), (90L, u'087'), (91L, u'088'), (92L, u'089'), (93L, u'090'), (94L, u'091'), (95L, u'092'), (96L, u'093'), (97L, u'094'), (98L, u'095'), (99L, u'096'), (100L, u'097'), (101L, u'098'), (102L, u'099'), (103L, u'100'), (104L, u'101'), (105L, u'102'), (106L, u'103'), (107L, u'104'), (108L, u'105'), (109L, u'106'), (110L, u'107'), (111L, u'108'), (112L, u'109'), (113L, u'110'), (114L, u'111'), (115L, u'112'), (116L, u'113'), (117L, u'114'), (118L, u'115'), (119L, u'116'), (120L, u'117'), (121L, u'118'), (122L, u'119'), (123L, u'120'), (124L, u'121'), (125L, u'122'), (126L, u'123'), (146L, u'124'), (147L, u'125'), (148L, u'126'), (149L, u'127'), (150L, u'128'), (151L, u'129'), (152L, u'130'), (153L, u'131'), (154L, u'132'), (155L, u'133'), (156L, u'134'), (157L, u'C30'), (159L, u'135'), (160L, u'136'), (158L, u'C31'), (161L, u'137'), (162L, u'138'), (163L, u'139'), (164L, u'140'), (165L, u'141'), (166L, u'142'), (167L, u'143'), (168L, u'144'), (169L, u'145'), (170L, u'146'), (171L, u'147'), (172L, u'148'), (173L, u'149'), (174L, u'150'), (175L, u'151'), (176L, u'152'), (177L, u'153'), (178L, u'154'), (284L, u'155'), (179L, u'10'), (180L, u'11'), (285L, u'156'), (181L, u'12'), (286L, u'157'), (182L, u'13'), (287L, u'158'), (279L, u'159'), (183L, u'14'), (184L, u'15'), (280L, u'160'), (185L, u'16'), (186L, u'17'), (187L, u'18'), (188L, u'19'), (189L, u'20'), (190L, u'21'), (191L, u'22'), (192L, u'23'), (193L, u'24'), (194L, u'25'), (195L, u'26'), (196L, u'27'), (197L, u'28'), (198L, u'29'), (199L, u'3'), (200L, u'30'), (201L, u'31'), (202L, u'32'), (203L, u'33'), (204L, u'34'), (205L, u'35'), (206L, u'36'), (207L, u'37'), (208L, u'38'), (209L, u'39'), (210L, u'4'), (211L, u'40'), (212L, u'41'), (213L, u'42'), (214L, u'43'), (215L, u'44'), (216L, u'45'), (217L, u'46'), (218L, u'47'), (219L, u'48'), (220L, u'49'), (221L, u'5'), (222L, u'50'), (223L, u'51'), (224L, u'52'), (225L, u'53'), (226L, u'54'), (227L, u'55'), (228L, u'56'), (229L, u'57'), (230L, u'58'), (231L, u'59'), (232L, u'6'), (233L, u'60'), (234L, u'61'), (235L, u'62'), (236L, u'63'), (237L, u'64'), (238L, u'65'), (239L, u'66'), (240L, u'67'), (241L, u'68'), (242L, u'69'), (243L, u'7'), (244L, u'70'), (245L, u'71'), (246L, u'72'), (247L, u'73'), (248L, u'74'), (249L, u'75'), (250L, u'76'), (251L, u'77'), (252L, u'78'), (253L, u'79'), (254L, u'8'), (255L, u'80'), (256L, u'81'), (257L, u'82'), (258L, u'83'), (259L, u'84'), (260L, u'85'), (261L, u'86'), (262L, u'87'), (263L, u'88'), (264L, u'89'), (265L, u'9'), (266L, u'90'), (267L, u'91'), (268L, u'92'), (269L, u'93'), (270L, u'94'), (271L, u'95'), (272L, u'96'), (273L, u'97'), (274L, u'98'), (275L, u'99'), (276L, u'A'), (277L, u'B'), (278L, u'C'), (281L, u'161'), (282L, u'162'), (283L, u'163'), (288L, u'164'), (289L, u'165'), (290L, u'166'), (291L, u'167'), (292L, u'168'), (293L, u'169'), (294L, u'170'), (295L, u'171'), (296L, u'172'), (297L, u'173'), (298L, u'174'), (299L, u'175'), (300L, u'176'), (301L, u'177'), (302L, u'178'))
OBS_INSTRUMENT_VGISS_CAMERA_CHOICES = ((2L, u'N'), (3L, u'W'))
OBS_INSTRUMENT_GOSSI_OBSTRUCTION_ID_CHOICES = ((1L, u'NOT POSSIBLE'), (2L, u'POSSIBLE'), (3L, u'PRESENCE VERIFIED'))
OBS_MISSION_CASSINI_PRIME_CHOICES = ((3L, u'Y'), (2L, u'N'))
OBS_INSTRUMENT_COUVIS_TEST_PULSE_STATE_CHOICES = ((1L, u'NULL'), (2L, u'OFF'), (3L, u'ON'))
OBS_INSTRUMENT_VGISS_FILTER_NUMBER_CHOICES = ((1L, u'0'), (2L, u'1'), (3L, u'2'), (4L, u'3'), (5L, u'4'), (6L, u'5'), (7L, u'6'), (8L, u'7'))
OBS_INSTRUMENT_GOSSI_ORBIT_NUMBER_CHOICES = ((1L, u'0'), (2L, u'1'), (3L, u'2'), (4L, u'3'), (5L, u'4'), (6L, u'6'), (7L, u'7'), (8L, u'8'), (9L, u'9'), (10L, u'10'), (11L, u'11'), (12L, u'12'), (13L, u'14'), (14L, u'15'), (15L, u'17'), (16L, u'18'), (17L, u'19'), (18L, u'20'), (19L, u'21'), (20L, u'22'), (21L, u'24'), (22L, u'25'), (23L, u'26'), (24L, u'27'), (25L, u'28'), (26L, u'29'), (27L, u'30'), (28L, u'31'), (29L, u'32'), (30L, u'33'))
OBS_INSTRUMENT_COVIMS_VIS_SAMPLING_MODE_ID_CHOICES = ((1L, u'HI-RES'), (2L, u'N/A'), (3L, u'NORMAL'), (4L, u'UNK'))
OBS_INSTRUMENT_COISS_FILTER_CHOICES = ((1L, u'BL1'), (2L, u'BL1+GRN'), (5L, u'BL2'), (6L, u'BL2+POL'), (7L, u'CB1'), (10L, u'CB2'), (11L, u'CB2+IRPOL'), (12L, u'CB3'), (13L, u'CB3+IRPOL'), (14L, u'CLEAR'), (15L, u'GRN'), (17L, u'GRN+POL'), (18L, u'GRN+RED'), (19L, u'HAL'), (21L, u'IR1'), (23L, u'IR1+IR2'), (16L, u'GRN+IRPOL'), (24L, u'IR2'), (25L, u'IR2+IR3'), (27L, u'IR3'), (28L, u'IR3+IR4'), (30L, u'IR4'), (31L, u'IR4+IRPOL'), (32L, u'IR5'), (34L, u'IRPOL'), (35L, u'IRPOL+CB2'), (36L, u'IRPOL+CB3'), (39L, u'IRPOL+MT3'), (40L, u'MT1'), (42L, u'MT2'), (44L, u'MT2+IRPOL'), (45L, u'MT3'), (46L, u'MT3+IRPOL'), (47L, u'POL'), (48L, u'POL+CB1'), (49L, u'POL+CB2'), (52L, u'POL+MT1'), (53L, u'POL+MT2'), (55L, u'RED'), (56L, u'RED+IR1'), (59L, u'UV1'), (67L, u'UV2'), (75L, u'UV2+UV3'), (76L, u'UV3'), (81L, u'UV3+POL'), (83L, u'VIO'), (3L, u'BL1+IR3'), (4L, u'BL1+MT3'), (8L, u'CB1+HAL'), (9L, u'CB1+IRPOL'), (20L, u'HAL+CB3'), (22L, u'IR1+CB2'), (26L, u'IR2+IRPOL'), (29L, u'IR3+IRPOL'), (33L, u'IR5+IRPOL'), (37L, u'IRPOL+IR1'), (38L, u'IRPOL+IR3'), (41L, u'MT1+IRPOL'), (43L, u'MT2+IR1'), (50L, u'POL+IR1'), (51L, u'POL+IR3'), (60L, u'UV1+BL2'), (54L, u'POL+MT3'), (61L, u'UV1+CB1'), (57L, u'RED+IR3'), (62L, u'UV1+CB2'), (63L, u'UV1+GRN'), (58L, u'RED+MT2'), (74L, u'UV2+MT1'), (64L, u'UV1+IR1'), (65L, u'UV1+IR3'), (66L, u'UV1+UV3'), (68L, u'UV2+BL2'), (69L, u'UV2+CB1'), (70L, u'UV2+CB2'), (71L, u'UV2+GRN'), (72L, u'UV2+IR1'), (73L, u'UV2+IR3'), (77L, u'UV3+BL1'), (78L, u'UV3+HAL'), (79L, u'UV3+IR2'), (80L, u'UV3+IR4'), (82L, u'UV3+RED'), (84L, u'VIO+CB3'))
OBS_INSTRUMENT_COISS_SHUTTER_MODE_ID_CHOICES = ((1L, u'BOTSIM'), (2L, u'NACONLY'), (3L, u'WACONLY'))
OBS_INSTRUMENT_COISS_SHUTTER_STATE_ID_CHOICES = ((1L, u'DISABLED'), (2L, u'ENABLED'))
OBS_INSTRUMENT_VGISS_SHUTTER_MODE_CHOICES = ((1L, u'BODARK'), (2L, u'BOTALT'), (3L, u'BOTSIM'), (4L, u'BSIMAN'), (5L, u'NAONLY'), (6L, u'NOSHUT'), (7L, u'WAONLY'))
OBS_INSTRUMENT_VGISS_SCAN_MODE_CHOICES = ((1L, u'10:1'), (2L, u'1:1'), (3L, u'2:1'), (4L, u'3:1'), (5L, u'5:1'))
OBS_GENERAL_CLASS_ID_CHOICES = ((1L, u'R'),)
OBS_INSTRUMENT_COVIMS_IR_SAMPLING_MODE_ID_CHOICES = ((1L, u'HI-RES'), (2L, u'NORMAL'), (3L, u'UNDER'))
OBS_INSTRUMENT_COISS_TELEMETRY_FORMAT_ID_CHOICES = ((2L, u'S_N_ER_2'), (3L, u'S_N_ER_3'), (4L, u'S_N_ER_5'), (5L, u'S_N_ER_5A'), (7L, u'UNK'), (1L, u'S_N_ER_1'), (6L, u'S_N_ER_6'))
OBS_INSTRUMENT_COISS_INST_CMPRS_PARAM_GOB_CHOICES = ((1L, u'-2147483648'), (2L, u'0'), (3L, u'1'), (4L, u'2'), (5L, u'3'), (6L, u'4'), (7L, u'5'), (8L, u'6'), (9L, u'7'), (10L, u'8'), (11L, u'9'), (12L, u'10'), (13L, u'11'), (14L, u'15'))
OBS_INSTRUMENT_COVIMS_SPECTRAL_SUMMING_CHOICES = ((1L, u'OFF'), (2L, u'ON'))
OBS_INSTRUMENT_COUVIS_DWELL_TIME_CHOICES = ((1L, u'0'), (2L, u'1'), (3L, u'2'), (4L, u'3'), (5L, u'8'), (6L, u'9'), (7L, u'16'), (8L, u'32'), (9L, u'64'), (10L, u'72'))
OBS_INSTRUMENT_COUVIS_SLIT_STATE_CHOICES = ((1L, u'HIGH_RESOLUTION'), (2L, u'LOW_RESOLUTION'), (3L, u'NULL'), (4L, u'OCCULTATION'))
OBS_TYPE_IMAGE_IMAGE_TYPE_ID_CHOICES = ((2L, u'FRAM'), (3L, u'PUSH'), (4L, u'RAST'), (5L, u'CUBE'))
OBS_MISSION_CASSINI_PRIME_INST_ID_CHOICES = ((2L, u'COCIRS'), (3L, u'COISS'), (4L, u'COUVIS'), (5L, u'COVIMS'))
OBS_INSTRUMENT_COCIRS_INSTRUMENT_MODE_ALL_FLAG_CHOICES = ((1L, u'0'), (2L, u'1'))
OBS_INSTRUMENT_COCIRS_INSTRUMENT_MODE_BLINKING_FLAG_CHOICES = ((2L, u'1'), (1L, u'0'))
OBS_INSTRUMENT_COUVIS_CHANNEL_CHOICES = ((1L, u'EUV'), (2L, u'FUV'), (3L, u'HDAC'), (4L, u'HSP'))
OBS_GENERAL_INSTRUMENT_ID_CHOICES = ((2L, u'COISS'), (1L, u'COCIRS'), (3L, u'COVIMS'), (127L, u'COUVIS'), (4L, u'GOSSI'), (168L, u'HSTACS'), (169L, u'HSTWFPC2'), (6L, u'VGISS'), (5L, u'LORRI'), (171L, u'VGIRIS'), (170L, u'HSTNICMOS'))
OBS_INSTRUMENT_COISS_IMAGE_OBSERVATION_TYPE_CHOICES = ((1L, u'CALIBRATION'), (3L, u'OPNAV'), (6L, u'SCIENCE'), (8L, u'SCIENCE,OPNAV'), (5L, u'OPNAV,SUPPORT'), (9L, u'SCIENCE,SUPPORT'), (10L, u'SUPPORT'), (2L, u'ENGINEERING'), (4L, u'OPNAV,SCIENCE'), (7L, u'SCIENCE,CALIBRATION'), (11L, u'SUPPORT,OPNAV'), (12L, u'UNK'))
OBS_INSTRUMENT_GOSSI_GAIN_MODE_ID_CHOICES = ((1L, u'100K'), (2L, u'10K'), (3L, u'400K'), (4L, u'40K'))
OBS_INSTRUMENT_VGISS_EDIT_MODE_CHOICES = ((1L, u'1:1'), (2L, u'1:2'), (3L, u'1:3'), (4L, u'1:32'), (5L, u'1;1'), (6L, u'1;32'), (7L, u'2:3'), (8L, u'3:4'), (9L, u'3:5'))
OBS_GENERAL_INST_HOST_ID_CHOICES = ((1L, u'CO'), (2L, u'GO'), (4L, u'VG1'), (5L, u'VG2'), (3L, u'NH'), (40L, u'Hubble'))
OBS_INSTRUMENT_COCIRS_DETECTOR_ID_CHOICES = ((1L, u'FP1'), (2L, u'FP3'), (3L, u'FP4'))
OBS_INSTRUMENT_COVIMS_INSTRUMENT_MODE_ID_CHOICES = ((1L, u'CAL_BACKGROUND'), (2L, u'CAL_SOLAR'), (3L, u'CAL_SPECTRAL'), (4L, u'IMAGE'), (5L, u'LINE'), (6L, u'OCCULTATION'), (7L, u'POINT'))
OBS_INSTRUMENT_COISS_INST_CMPRS_PARAM_QF_CHOICES = ((1L, u'-2147483648'), (2L, u'0'), (3L, u'1'))
OBS_GENERAL_TARGET_NAME_CHOICES = ((5L, u'ADRASTEA'), (94L, u'AEGAEON'), (95L, u'ALBIORIX'), (6L, u'AMALTHEA'), (96L, u'ANTHE'), (7L, u'ARIEL'), (8L, u'ATLAS'), (97L, u'BEBHIONN'), (98L, u'BERGELMIR'), (99L, u'BESTLA'), (9L, u'BETACMA'), (10L, u'CALLISTO'), (11L, u'CALYPSO'), (12L, u'DAPHNIS'), (13L, u'DIONE'), (14L, u'EARTH'), (15L, u'ELARA'), (16L, u'ENCELADUS'), (17L, u'EPIMETHEUS'), (100L, u'ERRIAPUS'), (18L, u'EUROPA'), (19L, u'FOMALHAUT'), (20L, u'GANYMEDE'), (101L, u'GREIP'), (21L, u'HELENE'), (22L, u'HIMALIA'), (23L, u'HYPERION'), (102L, u'HYROKKIN'), (24L, u'IAPETUS'), (25L, u'IO'), (26L, u'J RINGS'), (27L, u'JANUS'), (28L, u'JUPITER'), (104L, u'KARI'), (105L, u'LOGE'), (29L, u'MASURSKY'), (30L, u'METHONE'), (31L, u'METIS'), (32L, u'MIMAS'), (33L, u'MIRANDA'), (34L, u'MOON'), (35L, u'N RINGS'), (36L, u'NEPTUNE'), (37L, u'NEREID'), (38L, u'NONE'), (1L, None), (39L, u'OBERON'), (40L, u'ORION'), (41L, u'PALLENE'), (42L, u'PAN'), (43L, u'PANDORA'), (44L, u'PHOEBE'), (45L, u'PLAQUE'), (46L, u'PLEIADES'), (47L, u'POLYDEUCES'), (48L, u'PROMETHEUS'), (49L, u'RHEA'), (50L, u'S RINGS'), (107L, u'S12_2004'), (51L, u'SATURN'), (52L, u'SCORPIUS'), (109L, u'SKATHI'), (110L, u'SKOLL'), (54L, u'SKY'), (55L, u'SPICA'), (56L, u'SUN'), (111L, u'SUTTUNGR'), (57L, u'SYSTEM'), (112L, u'TARQEQ'), (58L, u'TELESTO'), (59L, u'TETHYS'), (60L, u'THEBE'), (61L, u'TITAN'), (62L, u'TITANIA'), (63L, u'TRITON'), (64L, u'U RINGS'), (65L, u'UMBRIEL'), (103L, u'IJIRAQ'), (66L, u'UNKNOWN'), (67L, u'URANUS'), (68L, u'VEGA'), (69L, u'VENUS'), (106L, u'PAALIAQ'), (2L, u'1985U1'), (3L, u'1989N1'), (108L, u'SIARNAQ'), (4L, u'1989N2'), (113L, u'TARVOS'), (115L, u'MUNDILFARI'), (116L, u'PLUTO'), (117L, u'YMIR'), (118L, u'CALLAMP'), (119L, u'SIGMASG'), (120L, u'THRYMR'), (121L, u'KIVIUQ'), (122L, u'OTHER'), (123L, u'PDS_target_name'), (124L, u'SURTUR'))
OBS_GENERAL_PLANET_ID_CHOICES = ((3L, u'JUP'), (5L, u'SAT'), (6L, u'URA'), (4L, u'NEP'), (7L, u'VEN'), (2L, u'EAR'))
OBS_INSTRUMENT_COCIRS_INSTRUMENT_MODE_EVEN_FLAG_CHOICES = ((2L, u'1'), (1L, u'0'))
OBS_GENERAL_TYPE_ID_CHOICES = ((1L, u'CUBE'), (2L, u'IMG'), (3L, u'LINE'), (5L, u'POINT'), (4L, u'MOV'), (6L, u'PROFILE'))
OBS_INSTRUMENT_COISS_INST_CMPRS_PARAM_TB_CHOICES = ((1L, u'-2147483648'), (2L, u'0'), (3L, u'1'))
OBS_MISSION_VOYAGER_SPACECRAFT_NAME_CHOICES = ((1L, u'VG1'), (2L, u'VG2'))
OBS_INSTRUMENT_VGISS_GAIN_MODE_CHOICES = ((1L, u'LOW'),)
OBS_INSTRUMENT_COUVIS_HI_VOLTAGE_POWER_SUPPLY_STATE_CHOICES = ((1L, u'OFF'), (2L, u'ON'))

class ObsGeneral(models.Model):
    volume_id = models.CharField(max_length=30, blank=True, null=True)
    class_id = models.CharField(max_length=1, blank=True, null=True, choices = OBS_GENERAL_CLASS_ID_CHOICES)
    mult_obs_general_class_id = models.ForeignKey(MultObsGeneralClassId, db_column="mult_obs_general_class_id", db_index=False, null=True, blank=True)
    declination1 = models.FloatField(null=True, blank=True)
    declination2 = models.FloatField(null=True, blank=True)
    instrument_id = models.CharField(max_length=6, blank=True, null=True, choices = OBS_GENERAL_INSTRUMENT_ID_CHOICES)
    mult_obs_general_instrument_id = models.ForeignKey(MultObsGeneralInstrumentId, db_column="mult_obs_general_instrument_id", db_index=False, null=True, blank=True)
    inst_host_id = models.CharField(max_length=3, blank=True, null=True, choices = OBS_GENERAL_INST_HOST_ID_CHOICES)
    mult_obs_general_inst_host_id = models.ForeignKey(MultObsGeneralInstHostId, db_column="mult_obs_general_inst_host_id", db_index=False, null=True, blank=True)
    is_image = models.CharField(max_length=1, blank=True, null=True)
    mission_id = models.CharField(max_length=2, blank=True, null=True, choices = OBS_GENERAL_MISSION_ID_CHOICES)
    mult_obs_general_mission_id = models.ForeignKey(MultObsGeneralMissionId, db_column="mult_obs_general_mission_id", db_index=False, null=True, blank=True)
    note = models.CharField(max_length=255, blank=True, null=True)
    observation_duration = models.FloatField(null=True, blank=True)
    planet_id = models.CharField(max_length=3, blank=True, null=True, choices = OBS_GENERAL_PLANET_ID_CHOICES)
    mult_obs_general_planet_id = models.ForeignKey(MultObsGeneralPlanetId, db_column="mult_obs_general_planet_id", db_index=False, null=True, blank=True)
    primary_file_spec = models.CharField(max_length=240, blank=True, null=True)
    quantity = models.CharField(max_length=25, blank=True, null=True, choices = OBS_GENERAL_QUANTITY_CHOICES)
    mult_obs_general_quantity = models.ForeignKey(MultObsGeneralQuantity, db_column="mult_obs_general_quantity", db_index=False, null=True, blank=True)
    right_asc1 = models.FloatField(null=True, blank=True)
    right_asc2 = models.FloatField(null=True, blank=True)
    ring_obs_id = models.CharField(max_length=40, blank=True, null=True)
    target_class = models.CharField(max_length=11, blank=True, null=True, choices = OBS_GENERAL_TARGET_CLASS_CHOICES)
    mult_obs_general_target_class = models.ForeignKey(MultObsGeneralTargetClass, db_column="mult_obs_general_target_class", db_index=False, null=True, blank=True)
    target_name = models.CharField(max_length=15, blank=True, null=True, choices = OBS_GENERAL_TARGET_NAME_CHOICES)
    mult_obs_general_target_name = models.ForeignKey(MultObsGeneralTargetName, db_column="mult_obs_general_target_name", db_index=False, null=True, blank=True)
    time_sec1 = models.CharField(max_length=15, blank=True, null=True, choices = OBS_GENERAL_TARGET_NAME_CHOICES)
    time_sec2 = models.CharField(max_length=15, blank=True, null=True, choices = OBS_GENERAL_TARGET_NAME_CHOICES)
    type_id = models.CharField(max_length=7, blank=True, null=True, choices = OBS_GENERAL_TYPE_ID_CHOICES)
    mult_obs_general_type_id = models.ForeignKey(MultObsGeneralTypeId, db_column="mult_obs_general_type_id", db_index=False, null=True, blank=True)
    volume_id_list = models.CharField(max_length=200, blank=True, null=True)

    class Meta:
        db_table = 'obs_general'

    def __unicode__(self):
        return self.ring_obs_id


class ObsInstrumentCocirs(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    DETECTOR_ID = models.CharField(max_length=3, blank=True, null=True, choices = OBS_INSTRUMENT_COCIRS_DETECTOR_ID_CHOICES)
    mult_obs_instrument_COCIRS_DETECTOR_ID = models.ForeignKey(MultObsInstrumentCocirsDetectorId, db_column="mult_obs_instrument_COCIRS_DETECTOR_ID", db_index=False, null=True, blank=True)
    exposure_duration1 = models.FloatField(null=True, blank=True)
    exposure_duration2 = models.FloatField(null=True, blank=True)
    INSTRUMENT_MODE_ALL_FLAG = models.CharField(max_length=11, blank=True, null=True, choices = OBS_INSTRUMENT_COCIRS_INSTRUMENT_MODE_ALL_FLAG_CHOICES)
    mult_obs_instrument_COCIRS_INSTRUMENT_MODE_ALL_FLAG = models.ForeignKey(MultObsInstrumentCocirsInstrumentModeAllFlag, db_column="mult_obs_instrument_COCIRS_INSTRUMENT_MODE_ALL_FLAG", db_index=False, null=True, blank=True)
    INSTRUMENT_MODE_BLINKING_FLAG = models.CharField(max_length=11, blank=True, null=True, choices = OBS_INSTRUMENT_COCIRS_INSTRUMENT_MODE_BLINKING_FLAG_CHOICES)
    mult_obs_instrument_COCIRS_INSTRUMENT_MODE_BLINKING_FLAG = models.ForeignKey(MultObsInstrumentCocirsInstrumentModeBlinkingFlag, db_column="mult_obs_instrument_COCIRS_INSTRUMENT_MODE_BLINKING_FLAG", db_index=False, null=True, blank=True)
    INSTRUMENT_MODE_CENTERS_FLAG = models.CharField(max_length=11, blank=True, null=True, choices = OBS_INSTRUMENT_COCIRS_INSTRUMENT_MODE_CENTERS_FLAG_CHOICES)
    mult_obs_instrument_COCIRS_INSTRUMENT_MODE_CENTERS_FLAG = models.ForeignKey(MultObsInstrumentCocirsInstrumentModeCentersFlag, db_column="mult_obs_instrument_COCIRS_INSTRUMENT_MODE_CENTERS_FLAG", db_index=False, null=True, blank=True)
    INSTRUMENT_MODE_EVEN_FLAG = models.CharField(max_length=11, blank=True, null=True, choices = OBS_INSTRUMENT_COCIRS_INSTRUMENT_MODE_EVEN_FLAG_CHOICES)
    mult_obs_instrument_COCIRS_INSTRUMENT_MODE_EVEN_FLAG = models.ForeignKey(MultObsInstrumentCocirsInstrumentModeEvenFlag, db_column="mult_obs_instrument_COCIRS_INSTRUMENT_MODE_EVEN_FLAG", db_index=False, null=True, blank=True)
    INSTRUMENT_MODE_ODD_FLAG = models.CharField(max_length=11, blank=True, null=True, choices = OBS_INSTRUMENT_COCIRS_INSTRUMENT_MODE_ODD_FLAG_CHOICES)
    mult_obs_instrument_COCIRS_INSTRUMENT_MODE_ODD_FLAG = models.ForeignKey(MultObsInstrumentCocirsInstrumentModeOddFlag, db_column="mult_obs_instrument_COCIRS_INSTRUMENT_MODE_ODD_FLAG", db_index=False, null=True, blank=True)
    INSTRUMENT_MODE_PAIRS_FLAG = models.CharField(max_length=11, blank=True, null=True, choices = OBS_INSTRUMENT_COCIRS_INSTRUMENT_MODE_PAIRS_FLAG_CHOICES)
    mult_obs_instrument_COCIRS_INSTRUMENT_MODE_PAIRS_FLAG = models.ForeignKey(MultObsInstrumentCocirsInstrumentModePairsFlag, db_column="mult_obs_instrument_COCIRS_INSTRUMENT_MODE_PAIRS_FLAG", db_index=False, null=True, blank=True)
    SPECTRUM_SAMPLES = models.CharField(max_length=11, blank=True, null=True, choices = OBS_INSTRUMENT_COCIRS_SPECTRUM_SAMPLES_CHOICES)
    mult_obs_instrument_COCIRS_SPECTRUM_SAMPLES = models.ForeignKey(MultObsInstrumentCocirsSpectrumSamples, db_column="mult_obs_instrument_COCIRS_SPECTRUM_SAMPLES", db_index=False, null=True, blank=True)
    targets_detected_list = models.CharField(max_length=250, blank=True, null=True)

    class Meta:
        db_table = 'obs_instrument_COCIRS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsInstrumentCoiss(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    ANTIBLOOMING_STATE_FLAG = models.CharField(max_length=4, blank=True, null=True)
    CALIBRATION_LAMP_STATE_FLAG = models.CharField(max_length=4, blank=True, null=True)
    camera = models.CharField(max_length=1, blank=True, null=True, choices = OBS_INSTRUMENT_COISS_CAMERA_CHOICES)
    mult_obs_instrument_COISS_camera = models.ForeignKey(MultObsInstrumentCoissCamera, db_column="mult_obs_instrument_COISS_camera", db_index=False, null=True, blank=True)
    DATA_CONVERSION_TYPE = models.CharField(max_length=5, blank=True, null=True, choices = OBS_INSTRUMENT_COISS_DATA_CONVERSION_TYPE_CHOICES)
    mult_obs_instrument_COISS_DATA_CONVERSION_TYPE = models.ForeignKey(MultObsInstrumentCoissDataConversionType, db_column="mult_obs_instrument_COISS_DATA_CONVERSION_TYPE", db_index=False, null=True, blank=True)
    DELAYED_READOUT_FLAG = models.CharField(max_length=4, blank=True, null=True)
    EXPECTED_MAXIMUM_full_well_DN = models.FloatField(null=True, blank=True)
    EXPECTED_MAXIMUM_max_DN = models.FloatField(null=True, blank=True)
    FILTER = models.CharField(max_length=30, blank=True, null=True, choices = OBS_INSTRUMENT_COISS_FILTER_CHOICES)
    mult_obs_instrument_COISS_FILTER = models.ForeignKey(MultObsInstrumentCoissFilter, db_column="mult_obs_instrument_COISS_FILTER", db_index=False, null=True, blank=True)
    FILTER_NAME = models.CharField(max_length=13, blank=True, null=True)
    FILTER_TEMPERATURE = models.FloatField(null=True, blank=True)
    GAIN_MODE_ID = models.CharField(max_length=20, blank=True, null=True, choices = OBS_INSTRUMENT_COISS_GAIN_MODE_ID_CHOICES)
    mult_obs_instrument_COISS_GAIN_MODE_ID = models.ForeignKey(MultObsInstrumentCoissGainModeId, db_column="mult_obs_instrument_COISS_GAIN_MODE_ID", db_index=False, null=True, blank=True)
    IMAGE_OBSERVATION_TYPE = models.CharField(max_length=48, blank=True, null=True, choices = OBS_INSTRUMENT_COISS_IMAGE_OBSERVATION_TYPE_CHOICES)
    mult_obs_instrument_COISS_IMAGE_OBSERVATION_TYPE = models.ForeignKey(MultObsInstrumentCoissImageObservationType, db_column="mult_obs_instrument_COISS_IMAGE_OBSERVATION_TYPE", db_index=False, null=True, blank=True)
    INST_CMPRS_PARAM_GOB = models.CharField(max_length=11, blank=True, null=True, choices = OBS_INSTRUMENT_COISS_INST_CMPRS_PARAM_GOB_CHOICES)
    mult_obs_instrument_COISS_INST_CMPRS_PARAM_GOB = models.ForeignKey(MultObsInstrumentCoissInstCmprsParamGob, db_column="mult_obs_instrument_COISS_INST_CMPRS_PARAM_GOB", db_index=False, null=True, blank=True)
    INST_CMPRS_PARAM_MALGO = models.CharField(max_length=11, blank=True, null=True, choices = OBS_INSTRUMENT_COISS_INST_CMPRS_PARAM_MALGO_CHOICES)
    mult_obs_instrument_COISS_INST_CMPRS_PARAM_MALGO = models.ForeignKey(MultObsInstrumentCoissInstCmprsParamMalgo, db_column="mult_obs_instrument_COISS_INST_CMPRS_PARAM_MALGO", db_index=False, null=True, blank=True)
    INST_CMPRS_PARAM_QF = models.CharField(max_length=11, blank=True, null=True, choices = OBS_INSTRUMENT_COISS_INST_CMPRS_PARAM_QF_CHOICES)
    mult_obs_instrument_COISS_INST_CMPRS_PARAM_QF = models.ForeignKey(MultObsInstrumentCoissInstCmprsParamQf, db_column="mult_obs_instrument_COISS_INST_CMPRS_PARAM_QF", db_index=False, null=True, blank=True)
    INST_CMPRS_PARAM_TB = models.CharField(max_length=11, blank=True, null=True, choices = OBS_INSTRUMENT_COISS_INST_CMPRS_PARAM_TB_CHOICES)
    mult_obs_instrument_COISS_INST_CMPRS_PARAM_TB = models.ForeignKey(MultObsInstrumentCoissInstCmprsParamTb, db_column="mult_obs_instrument_COISS_INST_CMPRS_PARAM_TB", db_index=False, null=True, blank=True)
    INST_CMPRS_RATE_actual_average = models.FloatField(null=True, blank=True)
    INST_CMPRS_RATE_expected_average = models.FloatField(null=True, blank=True)
    INST_CMPRS_RATIO = models.FloatField(null=True, blank=True)
    INST_CMPRS_TYPE = models.CharField(max_length=8, blank=True, null=True, choices = OBS_INSTRUMENT_COISS_INST_CMPRS_TYPE_CHOICES)
    mult_obs_instrument_COISS_INST_CMPRS_TYPE = models.ForeignKey(MultObsInstrumentCoissInstCmprsType, db_column="mult_obs_instrument_COISS_INST_CMPRS_TYPE", db_index=False, null=True, blank=True)
    LIGHT_FLOOD_STATE_FLAG = models.CharField(max_length=4, blank=True, null=True)
    MISSING_LINES = models.FloatField(null=True, blank=True)
    MISSING_PACKET_FLAG = models.CharField(max_length=4, blank=True, null=True)
    OPTICS_TEMPERATURE_front = models.FloatField(null=True, blank=True)
    OPTICS_TEMPERATURE_rear = models.FloatField(null=True, blank=True)
    SHUTTER_MODE_ID = models.CharField(max_length=7, blank=True, null=True, choices = OBS_INSTRUMENT_COISS_SHUTTER_MODE_ID_CHOICES)
    mult_obs_instrument_COISS_SHUTTER_MODE_ID = models.ForeignKey(MultObsInstrumentCoissShutterModeId, db_column="mult_obs_instrument_COISS_SHUTTER_MODE_ID", db_index=False, null=True, blank=True)
    SHUTTER_STATE_ID = models.CharField(max_length=8, blank=True, null=True, choices = OBS_INSTRUMENT_COISS_SHUTTER_STATE_ID_CHOICES)
    mult_obs_instrument_COISS_SHUTTER_STATE_ID = models.ForeignKey(MultObsInstrumentCoissShutterStateId, db_column="mult_obs_instrument_COISS_SHUTTER_STATE_ID", db_index=False, null=True, blank=True)
    TELEMETRY_FORMAT_ID = models.CharField(max_length=16, blank=True, null=True, choices = OBS_INSTRUMENT_COISS_TELEMETRY_FORMAT_ID_CHOICES)
    mult_obs_instrument_COISS_TELEMETRY_FORMAT_ID = models.ForeignKey(MultObsInstrumentCoissTelemetryFormatId, db_column="mult_obs_instrument_COISS_TELEMETRY_FORMAT_ID", db_index=False, null=True, blank=True)
    VALID_MAXIMUM_maximum_DN_saturation_level = models.CharField(max_length=11, blank=True, null=True)
    VALID_MAXIMUM_minimum_full_well_saturation_level = models.CharField(max_length=11, blank=True, null=True)

    class Meta:
        db_table = 'obs_instrument_COISS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsInstrumentCouvis(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    BAND1 = models.FloatField(null=True, blank=True)
    BAND2 = models.FloatField(null=True, blank=True)
    BAND_BIN = models.FloatField(null=True, blank=True)
    Channel = models.CharField(max_length=5, blank=True, null=True, choices = OBS_INSTRUMENT_COUVIS_CHANNEL_CHOICES)
    mult_obs_instrument_COUVIS_Channel = models.ForeignKey(MultObsInstrumentCouvisChannel, db_column="mult_obs_instrument_COUVIS_Channel", db_index=False, null=True, blank=True)
    COMPRESSION_TYPE = models.CharField(max_length=8, blank=True, null=True, choices = OBS_INSTRUMENT_COUVIS_COMPRESSION_TYPE_CHOICES)
    mult_obs_instrument_COUVIS_COMPRESSION_TYPE = models.ForeignKey(MultObsInstrumentCouvisCompressionType, db_column="mult_obs_instrument_COUVIS_COMPRESSION_TYPE", db_index=False, null=True, blank=True)
    DWELL_TIME = models.CharField(max_length=11, blank=True, null=True, choices = OBS_INSTRUMENT_COUVIS_DWELL_TIME_CHOICES)
    mult_obs_instrument_COUVIS_DWELL_TIME = models.ForeignKey(MultObsInstrumentCouvisDwellTime, db_column="mult_obs_instrument_COUVIS_DWELL_TIME", db_index=False, null=True, blank=True)
    HI_VOLTAGE_POWER_SUPPLY_STATE = models.CharField(max_length=6, blank=True, null=True, choices = OBS_INSTRUMENT_COUVIS_HI_VOLTAGE_POWER_SUPPLY_STATE_CHOICES)
    mult_obs_instrument_COUVIS_HI_VOLTAGE_POWER_SUPPLY_STATE = models.ForeignKey(MultObsInstrumentCouvisHiVoltagePowerSupplyState, db_column="mult_obs_instrument_COUVIS_HI_VOLTAGE_POWER_SUPPLY_STATE", db_index=False, null=True, blank=True)
    INTEGRATION_DURATION = models.FloatField(null=True, blank=True)
    LINE1 = models.FloatField(null=True, blank=True)
    LINE2 = models.FloatField(null=True, blank=True)
    LINE_BIN = models.FloatField(null=True, blank=True)
    OBSERVATION_TYPE = models.CharField(max_length=8, blank=True, null=True, choices = OBS_INSTRUMENT_COUVIS_OBSERVATION_TYPE_CHOICES)
    mult_obs_instrument_COUVIS_OBSERVATION_TYPE = models.ForeignKey(MultObsInstrumentCouvisObservationType, db_column="mult_obs_instrument_COUVIS_OBSERVATION_TYPE", db_index=False, null=True, blank=True)
    OCCULTATION_PORT_STATE = models.CharField(max_length=16, blank=True, null=True, choices = OBS_INSTRUMENT_COUVIS_OCCULTATION_PORT_STATE_CHOICES)
    mult_obs_instrument_COUVIS_OCCULTATION_PORT_STATE = models.ForeignKey(MultObsInstrumentCouvisOccultationPortState, db_column="mult_obs_instrument_COUVIS_OCCULTATION_PORT_STATE", db_index=False, null=True, blank=True)
    ODC_ID = models.FloatField(null=True, blank=True)
    SAMPLES = models.FloatField(null=True, blank=True)
    SLIT_STATE = models.CharField(max_length=16, blank=True, null=True, choices = OBS_INSTRUMENT_COUVIS_SLIT_STATE_CHOICES)
    mult_obs_instrument_COUVIS_SLIT_STATE = models.ForeignKey(MultObsInstrumentCouvisSlitState, db_column="mult_obs_instrument_COUVIS_SLIT_STATE", db_index=False, null=True, blank=True)
    TEST_PULSE_STATE = models.CharField(max_length=8, blank=True, null=True, choices = OBS_INSTRUMENT_COUVIS_TEST_PULSE_STATE_CHOICES)
    mult_obs_instrument_COUVIS_TEST_PULSE_STATE = models.ForeignKey(MultObsInstrumentCouvisTestPulseState, db_column="mult_obs_instrument_COUVIS_TEST_PULSE_STATE", db_index=False, null=True, blank=True)

    class Meta:
        db_table = 'obs_instrument_COUVIS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsInstrumentCovims(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    channel = models.CharField(max_length=3, blank=True, null=True, choices = OBS_INSTRUMENT_COVIMS_CHANNEL_CHOICES)
    mult_obs_instrument_COVIMS_channel = models.ForeignKey(MultObsInstrumentCovimsChannel, db_column="mult_obs_instrument_COVIMS_channel", db_index=False, null=True, blank=True)
    INSTRUMENT_MODE_ID = models.CharField(max_length=20, blank=True, null=True, choices = OBS_INSTRUMENT_COVIMS_INSTRUMENT_MODE_ID_CHOICES)
    mult_obs_instrument_COVIMS_INSTRUMENT_MODE_ID = models.ForeignKey(MultObsInstrumentCovimsInstrumentModeId, db_column="mult_obs_instrument_COVIMS_INSTRUMENT_MODE_ID", db_index=False, null=True, blank=True)
    IR_EXPOSURE = models.FloatField(null=True, blank=True)
    IR_SAMPLING_MODE_ID = models.CharField(max_length=8, blank=True, null=True, choices = OBS_INSTRUMENT_COVIMS_IR_SAMPLING_MODE_ID_CHOICES)
    mult_obs_instrument_COVIMS_IR_SAMPLING_MODE_ID = models.ForeignKey(MultObsInstrumentCovimsIrSamplingModeId, db_column="mult_obs_instrument_COVIMS_IR_SAMPLING_MODE_ID", db_index=False, null=True, blank=True)
    SPECTRAL_EDITING = models.CharField(max_length=3, blank=True, null=True, choices = OBS_INSTRUMENT_COVIMS_SPECTRAL_EDITING_CHOICES)
    mult_obs_instrument_COVIMS_SPECTRAL_EDITING = models.ForeignKey(MultObsInstrumentCovimsSpectralEditing, db_column="mult_obs_instrument_COVIMS_SPECTRAL_EDITING", db_index=False, null=True, blank=True)
    SPECTRAL_SUMMING = models.CharField(max_length=3, blank=True, null=True, choices = OBS_INSTRUMENT_COVIMS_SPECTRAL_SUMMING_CHOICES)
    mult_obs_instrument_COVIMS_SPECTRAL_SUMMING = models.ForeignKey(MultObsInstrumentCovimsSpectralSumming, db_column="mult_obs_instrument_COVIMS_SPECTRAL_SUMMING", db_index=False, null=True, blank=True)
    VIS_EXPOSURE = models.FloatField(null=True, blank=True)
    VIS_SAMPLING_MODE_ID = models.CharField(max_length=8, blank=True, null=True, choices = OBS_INSTRUMENT_COVIMS_VIS_SAMPLING_MODE_ID_CHOICES)
    mult_obs_instrument_COVIMS_VIS_SAMPLING_MODE_ID = models.ForeignKey(MultObsInstrumentCovimsVisSamplingModeId, db_column="mult_obs_instrument_COVIMS_VIS_SAMPLING_MODE_ID", db_index=False, null=True, blank=True)

    class Meta:
        db_table = 'obs_instrument_COVIMS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsInstrumentGossi(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    COMPRESSION_TYPE = models.CharField(max_length=27, blank=True, null=True, choices = OBS_INSTRUMENT_GOSSI_COMPRESSION_TYPE_CHOICES)
    mult_obs_instrument_GOSSI_COMPRESSION_TYPE = models.ForeignKey(MultObsInstrumentGossiCompressionType, db_column="mult_obs_instrument_GOSSI_COMPRESSION_TYPE", db_index=False, null=True, blank=True)
    DATA_SET_ID = models.CharField(max_length=28, blank=True, null=True, choices = OBS_INSTRUMENT_GOSSI_DATA_SET_ID_CHOICES)
    mult_obs_instrument_GOSSI_DATA_SET_ID = models.ForeignKey(MultObsInstrumentGossiDataSetId, db_column="mult_obs_instrument_GOSSI_DATA_SET_ID", db_index=False, null=True, blank=True)
    ENCODING_COMPRESSION_RATIO = models.FloatField(null=True, blank=True)
    ENCODING_MAX_COMPRESSION_RATIO = models.FloatField(null=True, blank=True)
    ENCODING_MIN_COMPRESSION_RATIO = models.FloatField(null=True, blank=True)
    FILTER_NAME = models.CharField(max_length=7, blank=True, null=True, choices = OBS_INSTRUMENT_GOSSI_FILTER_NAME_CHOICES)
    mult_obs_instrument_GOSSI_FILTER_NAME = models.ForeignKey(MultObsInstrumentGossiFilterName, db_column="mult_obs_instrument_GOSSI_FILTER_NAME", db_index=False, null=True, blank=True)
    FILTER_NUMBER = models.CharField(max_length=5, blank=True, null=True, choices = OBS_INSTRUMENT_GOSSI_FILTER_NUMBER_CHOICES)
    mult_obs_instrument_GOSSI_FILTER_NUMBER = models.ForeignKey(MultObsInstrumentGossiFilterNumber, db_column="mult_obs_instrument_GOSSI_FILTER_NUMBER", db_index=False, null=True, blank=True)
    FRAME_DURATION = models.FloatField(null=True, blank=True)
    GAIN_MODE_ID = models.CharField(max_length=4, blank=True, null=True, choices = OBS_INSTRUMENT_GOSSI_GAIN_MODE_ID_CHOICES)
    mult_obs_instrument_GOSSI_GAIN_MODE_ID = models.ForeignKey(MultObsInstrumentGossiGainModeId, db_column="mult_obs_instrument_GOSSI_GAIN_MODE_ID", db_index=False, null=True, blank=True)
    IMAGE_ID = models.CharField(max_length=7, blank=True, null=True)
    MEAN_RADIANCE = models.FloatField(null=True, blank=True)
    MEAN_REFLECTANCE = models.FloatField(null=True, blank=True)
    OBSERVATION_ID = models.CharField(max_length=20, blank=True, null=True)
    OBSTRUCTION_ID = models.CharField(max_length=17, blank=True, null=True, choices = OBS_INSTRUMENT_GOSSI_OBSTRUCTION_ID_CHOICES)
    mult_obs_instrument_GOSSI_OBSTRUCTION_ID = models.ForeignKey(MultObsInstrumentGossiObstructionId, db_column="mult_obs_instrument_GOSSI_OBSTRUCTION_ID", db_index=False, null=True, blank=True)
    ORBIT_NUMBER = models.CharField(max_length=3, blank=True, null=True, choices = OBS_INSTRUMENT_GOSSI_ORBIT_NUMBER_CHOICES)
    mult_obs_instrument_GOSSI_ORBIT_NUMBER = models.ForeignKey(MultObsInstrumentGossiOrbitNumber, db_column="mult_obs_instrument_GOSSI_ORBIT_NUMBER", db_index=False, null=True, blank=True)
    PROCESSING_HISTORY_TEXT = models.CharField(max_length=75, blank=True, null=True)
    RADIANCE_SCALING_FACTOR = models.FloatField(null=True, blank=True)
    REFLECTANCE_SCALING_FACTOR = models.FloatField(null=True, blank=True)

    class Meta:
        db_table = 'obs_instrument_GOSSI'

    def __unicode__(self):
        return self.ring_obs_id


class ObsInstrumentNhjulo(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    SEQUENCE_ID = models.CharField(max_length=32, blank=True, null=True)
    spacecraft_clock_count1 = models.FloatField(null=True, blank=True)
    spacecraft_clock_count2 = models.FloatField(null=True, blank=True)

    class Meta:
        db_table = 'obs_instrument_NHJULO'

    def __unicode__(self):
        return self.ring_obs_id


class ObsInstrumentVgiss(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    camera = models.CharField(max_length=1, blank=True, null=True, choices = OBS_INSTRUMENT_VGISS_CAMERA_CHOICES)
    mult_obs_instrument_VGISS_camera = models.ForeignKey(MultObsInstrumentVgissCamera, db_column="mult_obs_instrument_VGISS_camera", db_index=False, null=True, blank=True)
    EDIT_MODE = models.CharField(max_length=7, blank=True, null=True, choices = OBS_INSTRUMENT_VGISS_EDIT_MODE_CHOICES)
    mult_obs_instrument_VGISS_EDIT_MODE = models.ForeignKey(MultObsInstrumentVgissEditMode, db_column="mult_obs_instrument_VGISS_EDIT_MODE", db_index=False, null=True, blank=True)
    FILTER_NAME = models.CharField(max_length=7, blank=True, null=True, choices = OBS_INSTRUMENT_VGISS_FILTER_NAME_CHOICES)
    mult_obs_instrument_VGISS_FILTER_NAME = models.ForeignKey(MultObsInstrumentVgissFilterName, db_column="mult_obs_instrument_VGISS_FILTER_NAME", db_index=False, null=True, blank=True)
    FILTER_NUMBER = models.CharField(max_length=4, blank=True, null=True, choices = OBS_INSTRUMENT_VGISS_FILTER_NUMBER_CHOICES)
    mult_obs_instrument_VGISS_FILTER_NUMBER = models.ForeignKey(MultObsInstrumentVgissFilterNumber, db_column="mult_obs_instrument_VGISS_FILTER_NUMBER", db_index=False, null=True, blank=True)
    GAIN_MODE = models.CharField(max_length=7, blank=True, null=True, choices = OBS_INSTRUMENT_VGISS_GAIN_MODE_CHOICES)
    mult_obs_instrument_VGISS_GAIN_MODE = models.ForeignKey(MultObsInstrumentVgissGainMode, db_column="mult_obs_instrument_VGISS_GAIN_MODE", db_index=False, null=True, blank=True)
    IMAGE_ID = models.CharField(max_length=10, blank=True, null=True)
    SCAN_MODE = models.CharField(max_length=7, blank=True, null=True, choices = OBS_INSTRUMENT_VGISS_SCAN_MODE_CHOICES)
    mult_obs_instrument_VGISS_SCAN_MODE = models.ForeignKey(MultObsInstrumentVgissScanMode, db_column="mult_obs_instrument_VGISS_SCAN_MODE", db_index=False, null=True, blank=True)
    SHUTTER_MODE = models.CharField(max_length=7, blank=True, null=True, choices = OBS_INSTRUMENT_VGISS_SHUTTER_MODE_CHOICES)
    mult_obs_instrument_VGISS_SHUTTER_MODE = models.ForeignKey(MultObsInstrumentVgissShutterMode, db_column="mult_obs_instrument_VGISS_SHUTTER_MODE", db_index=False, null=True, blank=True)

    class Meta:
        db_table = 'obs_instrument_VGISS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsMissionCassini(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    activity_name = models.CharField(max_length=9, blank=True, null=True)
    cassini_target_name = models.CharField(max_length=50, blank=True, null=True, choices = OBS_MISSION_CASSINI_CASSINI_TARGET_NAME_CHOICES)
    mult_obs_mission_cassini_cassini_target_name = models.ForeignKey(MultObsMissionCassiniCassiniTargetName, db_column="mult_obs_mission_cassini_cassini_target_name", db_index=False, null=True, blank=True)
    ert_sec1 = models.CharField(max_length=50, blank=True, null=True, choices = OBS_MISSION_CASSINI_CASSINI_TARGET_NAME_CHOICES)
    ert_sec2 = models.CharField(max_length=50, blank=True, null=True, choices = OBS_MISSION_CASSINI_CASSINI_TARGET_NAME_CHOICES)
    obs_name = models.CharField(max_length=30, blank=True, null=True)
    prime = models.CharField(max_length=1, blank=True, null=True, choices = OBS_MISSION_CASSINI_PRIME_CHOICES)
    mult_obs_mission_cassini_prime = models.ForeignKey(MultObsMissionCassiniPrime, db_column="mult_obs_mission_cassini_prime", db_index=False, null=True, blank=True)
    prime_inst_id = models.CharField(max_length=6, blank=True, null=True, choices = OBS_MISSION_CASSINI_PRIME_INST_ID_CHOICES)
    mult_obs_mission_cassini_prime_inst_id = models.ForeignKey(MultObsMissionCassiniPrimeInstId, db_column="mult_obs_mission_cassini_prime_inst_id", db_index=False, null=True, blank=True)
    rev_no = models.CharField(max_length=3, blank=True, null=True, choices = OBS_MISSION_CASSINI_REV_NO_CHOICES)
    mult_obs_mission_cassini_rev_no = models.ForeignKey(MultObsMissionCassiniRevNo, db_column="mult_obs_mission_cassini_rev_no", db_index=False, null=True, blank=True)
    spacecraft_clock_count1 = models.FloatField(null=True, blank=True)
    spacecraft_clock_count2 = models.FloatField(null=True, blank=True)

    class Meta:
        db_table = 'obs_mission_cassini'

    def __unicode__(self):
        return self.ring_obs_id


class ObsMissionGalileo(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    rev_no = models.CharField(max_length=6, blank=True, null=True, choices = OBS_MISSION_GALILEO_REV_NO_CHOICES)
    mult_obs_mission_galileo_rev_no = models.ForeignKey(MultObsMissionGalileoRevNo, db_column="mult_obs_mission_galileo_rev_no", db_index=False, null=True, blank=True)
    spacecraft_clock_count1 = models.CharField(max_length=6, blank=True, null=True, choices = OBS_MISSION_GALILEO_REV_NO_CHOICES)
    spacecraft_clock_count2 = models.CharField(max_length=6, blank=True, null=True, choices = OBS_MISSION_GALILEO_REV_NO_CHOICES)

    class Meta:
        db_table = 'obs_mission_galileo'

    def __unicode__(self):
        return self.ring_obs_id


class ObsMissionVoyager(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    ert_sec1 = models.CharField(max_length=6, blank=True, null=True, choices = OBS_MISSION_GALILEO_REV_NO_CHOICES)
    ert_sec2 = models.CharField(max_length=6, blank=True, null=True, choices = OBS_MISSION_GALILEO_REV_NO_CHOICES)
    spacecraft_clock_count1 = models.CharField(max_length=12, blank=True, null=True)
    spacecraft_clock_count2 = models.CharField(max_length=12, blank=True, null=True)
    spacecraft_clock_count_int1 = models.FloatField(null=True, blank=True)
    spacecraft_clock_count_int2 = models.FloatField(null=True, blank=True)
    spacecraft_name = models.CharField(max_length=3, blank=True, null=True, choices = OBS_MISSION_VOYAGER_SPACECRAFT_NAME_CHOICES)
    mult_obs_mission_voyager_spacecraft_name = models.ForeignKey(MultObsMissionVoyagerSpacecraftName, db_column="mult_obs_mission_voyager_spacecraft_name", db_index=False, null=True, blank=True)

    class Meta:
        db_table = 'obs_mission_voyager'

    def __unicode__(self):
        return self.ring_obs_id


class ObsRingGeometry(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    edge_on_altitude1 = models.FloatField(null=True, blank=True)
    edge_on_altitude2 = models.FloatField(null=True, blank=True)
    edge_on_J2000_longitude1 = models.FloatField(null=True, blank=True)
    edge_on_J2000_longitude2 = models.FloatField(null=True, blank=True)
    edge_on_radial_resolution1 = models.FloatField(null=True, blank=True)
    edge_on_radial_resolution2 = models.FloatField(null=True, blank=True)
    edge_on_radius1 = models.FloatField(null=True, blank=True)
    edge_on_radius2 = models.FloatField(null=True, blank=True)
    edge_on_solar_hour_angle1 = models.FloatField(null=True, blank=True)
    edge_on_solar_hour_angle2 = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    J2000_longitude1 = models.FloatField(null=True, blank=True)
    J2000_longitude2 = models.FloatField(null=True, blank=True)
    longitude_WRT_observer1 = models.FloatField(null=True, blank=True)
    longitude_WRT_observer2 = models.FloatField(null=True, blank=True)
    north_based_emission1 = models.FloatField(null=True, blank=True)
    north_based_emission2 = models.FloatField(null=True, blank=True)
    north_based_incidence1 = models.FloatField(null=True, blank=True)
    north_based_incidence2 = models.FloatField(null=True, blank=True)
    observer_ring_elevation1 = models.FloatField(null=True, blank=True)
    observer_ring_elevation2 = models.FloatField(null=True, blank=True)
    observer_ring_opening_angle = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    projected_radial_resolution1 = models.FloatField(null=True, blank=True)
    projected_radial_resolution2 = models.FloatField(null=True, blank=True)
    range_to_edge_on_point1 = models.FloatField(null=True, blank=True)
    range_to_edge_on_point2 = models.FloatField(null=True, blank=True)
    range_to_ring_intercept1 = models.FloatField(null=True, blank=True)
    range_to_ring_intercept2 = models.FloatField(null=True, blank=True)
    resolution1 = models.FloatField(null=True, blank=True)
    resolution2 = models.FloatField(null=True, blank=True)
    ring_azimuth_WRT_observer1 = models.FloatField(null=True, blank=True)
    ring_azimuth_WRT_observer2 = models.FloatField(null=True, blank=True)
    ring_center_distance = models.FloatField(null=True, blank=True)
    ring_center_emission = models.FloatField(null=True, blank=True)
    ring_center_incidence = models.FloatField(null=True, blank=True)
    ring_center_north_based_emission = models.FloatField(null=True, blank=True)
    ring_center_north_based_incidence = models.FloatField(null=True, blank=True)
    ring_center_phase = models.FloatField(null=True, blank=True)
    ring_radius1 = models.FloatField(null=True, blank=True)
    ring_radius2 = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    solar_ring_elev1 = models.FloatField(null=True, blank=True)
    solar_ring_elev2 = models.FloatField(null=True, blank=True)
    solar_ring_opening_angle = models.FloatField(null=True, blank=True)
    sub_observer_ring_long = models.FloatField(null=True, blank=True)
    sub_solar_ring_long = models.FloatField(null=True, blank=True)

    class Meta:
        db_table = 'obs_ring_geometry'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometry(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True, choices = OBS_SURFACE_GEOMETRY_TARGET_NAME_CHOICES)
    mult_obs_surface_geometry_target_name = models.ForeignKey(MultObsSurfaceGeometryTargetName, db_column="mult_obs_surface_geometry_target_name", db_index=False, null=True, blank=True)

    class Meta:
        db_table = 'obs_surface_geometry'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryAegaeon(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__AEGAEON'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryAlbiorix(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__ALBIORIX'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryAnthe(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__ANTHE'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryAtlas(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__ATLAS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryBebhionn(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__BEBHIONN'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryBergelmir(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__BERGELMIR'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryBestla(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__BESTLA'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryCalypso(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__CALYPSO'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryDaphnis(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__DAPHNIS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryDione(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__DIONE'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryEnceladus(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__ENCELADUS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryEpimetheus(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__EPIMETHEUS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryErriapus(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__ERRIAPUS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryHelene(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__HELENE'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryHyperion(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__HYPERION'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryHyrokkin(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__HYROKKIN'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryIapetus(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__IAPETUS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryIjiraq(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__IJIRAQ'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryJanus(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__JANUS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryJarnsaxa(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__JARNSAXA'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryJupiter(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__JUPITER'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryKari(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__KARI'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryKiviuq(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__KIVIUQ'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryLoge(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__LOGE'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryMethone(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__METHONE'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryMimas(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__MIMAS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryMundilfari(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__MUNDILFARI'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryPaaliaq(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__PAALIAQ'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryPallene(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__PALLENE'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryPan(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__PAN'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryPandora(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__PANDORA'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryPhoebe(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__PHOEBE'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryPolydeuces(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__POLYDEUCES'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryPrometheus(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__PROMETHEUS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryRhea(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__RHEA'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryS122004(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__S12_2004'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryS132004(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__S13_2004'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometrySaturn(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__SATURN'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometrySiarnaq(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__SIARNAQ'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometrySkathi(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__SKATHI'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometrySkoll(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__SKOLL'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometrySun(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__SUN'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometrySuttungr(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__SUTTUNGR'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryTarqeq(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__TARQEQ'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryTarvos(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__TARVOS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryTelesto(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__TELESTO'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryTethys(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__TETHYS'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryThrymr(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__THRYMR'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryTitan(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__TITAN'

    def __unicode__(self):
        return self.ring_obs_id


class ObsSurfaceGeometryYmir(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    center_distance = models.FloatField(null=True, blank=True)
    center_phase_angle = models.FloatField(null=True, blank=True)
    center_resolution = models.FloatField(null=True, blank=True)
    coarsest_resolution1 = models.FloatField(null=True, blank=True)
    coarsest_resolution2 = models.FloatField(null=True, blank=True)
    d_IAU_west_longitude = models.FloatField(null=True, blank=True)
    d_Observer_longitude = models.FloatField(null=True, blank=True)
    d_solar_hour_angle = models.FloatField(null=True, blank=True)
    emission1 = models.FloatField(null=True, blank=True)
    emission2 = models.FloatField(null=True, blank=True)
    finest_resolution1 = models.FloatField(null=True, blank=True)
    finest_resolution2 = models.FloatField(null=True, blank=True)
    IAU_west_longitude = models.FloatField(null=True, blank=True)
    IAU_west_longitude1 = models.FloatField(null=True, blank=True)
    IAU_west_longitude2 = models.FloatField(null=True, blank=True)
    incidence1 = models.FloatField(null=True, blank=True)
    incidence2 = models.FloatField(null=True, blank=True)
    Observer_longitude = models.FloatField(null=True, blank=True)
    Observer_longitude1 = models.FloatField(null=True, blank=True)
    Observer_longitude2 = models.FloatField(null=True, blank=True)
    phase1 = models.FloatField(null=True, blank=True)
    phase2 = models.FloatField(null=True, blank=True)
    planetocentric_latitude1 = models.FloatField(null=True, blank=True)
    planetocentric_latitude2 = models.FloatField(null=True, blank=True)
    planetographic_latitude1 = models.FloatField(null=True, blank=True)
    planetographic_latitude2 = models.FloatField(null=True, blank=True)
    range_to_body1 = models.FloatField(null=True, blank=True)
    range_to_body2 = models.FloatField(null=True, blank=True)
    solar_hour_angle = models.FloatField(null=True, blank=True)
    solar_hour_angle1 = models.FloatField(null=True, blank=True)
    solar_hour_angle2 = models.FloatField(null=True, blank=True)
    sub_observer_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_observer_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_observer_planetographic_latitude = models.FloatField(null=True, blank=True)
    sub_solar_IAU_longitude = models.FloatField(null=True, blank=True)
    sub_solar_planetocentric_latitude = models.FloatField(null=True, blank=True)
    sub_solar_planetographic_latitude = models.FloatField(null=True, blank=True)
    target_name = models.CharField(max_length=75, blank=True, null=True)

    class Meta:
        db_table = 'obs_surface_geometry__YMIR'

    def __unicode__(self):
        return self.ring_obs_id


class ObsTypeImage(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    duration = models.FloatField(null=True, blank=True)
    greater_pixel_size = models.FloatField(null=True, blank=True)
    image_type_id = models.CharField(max_length=4, blank=True, null=True, choices = OBS_TYPE_IMAGE_IMAGE_TYPE_ID_CHOICES)
    mult_obs_type_image_image_type_id = models.ForeignKey(MultObsTypeImageImageTypeId, db_column="mult_obs_type_image_image_type_id", db_index=False, null=True, blank=True)
    lesser_pixel_size = models.FloatField(null=True, blank=True)
    levels = models.FloatField(null=True, blank=True)

    class Meta:
        db_table = 'obs_type_image'

    def __unicode__(self):
        return self.ring_obs_id


class ObsWavelength(models.Model):
    obs_general = models.ForeignKey(ObsGeneral, db_column="obs_general_id", null=True, blank=True)
    polarization_type = models.CharField(max_length=8, blank=True, null=True, choices = OBS_WAVELENGTH_POLARIZATION_TYPE_CHOICES)
    mult_obs_wavelength_polarization_type = models.ForeignKey(MultObsWavelengthPolarizationType, db_column="mult_obs_wavelength_polarization_type", db_index=False, null=True, blank=True)
    spec_flag = models.CharField(max_length=1, blank=True, null=True, choices = OBS_WAVELENGTH_SPEC_FLAG_CHOICES)
    mult_obs_wavelength_spec_flag = models.ForeignKey(MultObsWavelengthSpecFlag, db_column="mult_obs_wavelength_spec_flag", db_index=False, null=True, blank=True)
    spec_size = models.FloatField(null=True, blank=True)
    wavelength1 = models.FloatField(null=True, blank=True)
    wavelength2 = models.FloatField(null=True, blank=True)
    wave_no1 = models.FloatField(null=True, blank=True)
    wave_no2 = models.FloatField(null=True, blank=True)
    wave_no_res1 = models.FloatField(null=True, blank=True)
    wave_no_res2 = models.FloatField(null=True, blank=True)
    wave_res1 = models.FloatField(null=True, blank=True)
    wave_res2 = models.FloatField(null=True, blank=True)

    class Meta:
        db_table = 'obs_wavelength'

    def __unicode__(self):
        return self.ring_obs_id



